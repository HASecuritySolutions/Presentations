input {
    stdin {}
}

filter {
    # This is used to capture the current time before filter section processing takes place
    ruby {
        code => "event.set('task_start',Time.now.to_f)"
    }
    # This is the initial parsing of the log
    grok {
        match => ["message", "(%{INT:step:int})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}",
        "message", "(%{INT:step:int})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}", 
        "message", "(%{INT:step:int})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}", 
        "message", "(%{INT:step:int})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}"]
    }
    # This will capture the finish time of the filter processing section and then use it with the
    # start time to calculate how long the log took to process.
    ruby {
        code => "event.set('task_end',Time.now.to_f)"
    }
    ruby {
        code => "event.set('logstash_time',(event.get('task_end') - event.get('task_start')).round(8))"
    }
    mutate {
        remove_field => [ 'task_start', 'task_end' ]
    }
}

output {
    stdout { codec => rubydebug }
    file {
        path => "/tmp/1_parsing.log"
        codec => "json"
    }
}
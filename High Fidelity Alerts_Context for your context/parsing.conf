input {
    stdin {}
}

filter {
    # This is used to capture the current time before filter section processing takes place
    ruby {
        code => "event.set('task_start',Time.now.to_f)"
    }
    # This is the initial parsing of the log
    grok {
        match => ["message", "(%{INT:step})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}",
        "message", "(%{INT:step})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}", 
        "message", "(%{INT:step})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}", 
        "message", "(%{INT:step})?\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}"]
    }
    mutate {
        convert => [ "step", "integer" ]
    }
    # Step 1 Basic cleanup
    if [step] {
      if [step] >= 1 {
        if [alert] =~ "GPL " {
            # This will parse out the category type from the alert
            grok {
                match => { "alert" => "GPL\s+%{DATA:category}\s" }
            }
            # This will store the category
            mutate {
                add_field => { "rule_type" => "Snort GPL" }
                lowercase => [ "category"]
            }
        }
        # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
        if [alert] =~ "ET " {
            # This will parse out the category type from the alert
            grok {
                match => { "alert" => "ET\s+%{DATA:category}\s" }
            }
            # This will store the category
            mutate {
                add_field => { "rule_type" => "Emerging Threats" }
                lowercase => [ "category"]
            }
        }
        # I recommend changing the field types below to integer so searches can do greater than or less than
        # and also so math functions can be ran against them
        mutate {
            convert => [ "source_port", "integer" ]
            convert => [ "destination_port", "integer" ]
            convert => [ "gid", "integer" ]
            convert => [ "sid", "integer" ]
        #  remove_field => [ "message"]
        }
        # This will translate the priority field into a severity field of either High, Medium, or Low
        if [priority] == 1 {
            mutate {
                add_field => { "severity" => "High" }
            }
        }
        if [priority] == 2 {
            mutate {
                add_field => { "severity" => "Medium" }
            }
        }
        if [priority] == 3 {
            mutate {
                add_field => { "severity" => "Low" }
            }
        }
      }
    }
    # Step 2 Pull in Rule
    if [step] {
      if [step] >= 2 {
        translate {
          field => "sid"
          destination => "rule"
          dictionary_path => "/home/jhenderson/rules.csv"
        }
      }
    }
    # Step 3 Geo
    if [step] {
        if [step] >= 3 {
            # This will perform a standard geoip lookup on the source and destination IP addresses
            geoip {
                source => "destination_ip"
                target => "destination_geo"
                tag_on_failure => []
            }
            geoip {
                source => "source_ip"
                target => "source_geo"
                tag_on_failure => []
            }
        }
    }
    # Step 4 Geo ASN
    if [step] {
        if [step] >= 4 {
            # This will perform a geoip ASN lookup on the source and destination IP addresses
            geoip {
                source => "destination_ip"
                target => "destination_geo"
                default_database_type => "ASN"
                tag_on_failure => []
            }
            geoip {
                source => "source_ip"
                target => "source_geo"
                default_database_type => "ASN"
                tag_on_failure => []
            }
        }
    }
    # Step 5 Pull in DNS
    if [step] {
        if [step] >= 5 {
            # This will look into previous DNS logs to find if any DNS name query resolved to
            # the destination IP from the snort alert.
            elasticsearch {
                hosts => [ "elasticsearch"]
                index => "logstash-bro-*"
                query => "event_type:dns AND answers:%{[destination_ip]}"
                fields => [["highest_registered_domain","destination_highest_registered_domain"],["query","destination_fqdn"]]
            }
            # This will look into previous DNS logs to find if any DNS name query resolved to
            # the source IP from the snort alert.
            elasticsearch {
                hosts => [ "elasticsearch"]
                index => "logstash-bro-*"
                query => "event_type:dns AND answers:%{[source_ip]}"
                fields => [["highest_registered_domain","source_highest_registered_domain"],["query","source_fqdn"]]
            }
        }
    }
    # Step 6 Top 1 Million check
    if [step] {
        if [step] >= 6 {
            if [source_highest_registered_domain] {
                translate {
                    field => "source_highest_registered_domain"
                    destination => "source_fqdn_top1m"
                    dictionary_path => "/home/jhenderson/top1m.csv"
                }
            }
            if [destination_highest_registered_domain] {
                translate {
                    field => "destination_highest_registered_domain"
                    destination => "destination_fqdn_top1m"
                    dictionary_path => "/home/jhenderson/top1m.csv"
                }
            }
            if [source_fqdn_top1m] {
                mutate {
                    add_tag => [ "top-1m", "source_top1m" ]
                }
            }
            if [destination_fqdn_top1m] {
                mutate {
                    add_tag => [ "top-1m", "destination_top1m" ]
                }
            }
        }
    }
    # Step 7 WHOIS information
    if [step] {
        if [step] >= 7 {
            if "source_top1m" not in [tags] and [source_highest_registered_domain] {
                rest {  
                    request => {
                        url => "http://domain_stats:20000/domain/creation_date/%{source_highest_registered_domain}"
                    }
                    sprintf => true
                    json => false
                    target => "source_domain_creation_date"
                } 
            }
            if "destination_top1m" not in [tags] and [destination_highest_registered_domain] {
                rest {
                    request => {
                        url => "http://domain_stats:20000/domain/creation_date/%{destination_highest_registered_domain}"
                    }
                    sprintf => true
                    json => false
                    target => "destination_domain_creation_date"
                } 
            }
        }
    }
    # Step 8 Frequency Analysis
    if [step] {
        if [step] >= 8 {
            # This section will calculate the natural language frequency score of a domain
            # assuming the domain is not a top-1m domain and a domain exists
            if "source_top1m" not in [tags] and [source_highest_registered_domain] {
                rest {
                    request => {
                        url => "http://freq_server:10004/measure/%{source_highest_registered_domain}"
                    }
                    sprintf => true
                    json => false
                    target => "source_domain_frequency_score"
                } 
            }
            if "destination_top1m" not in [tags] and [destination_highest_registered_domain] {
                rest {
                    request => {
                        url => "http://freq_server:10004/measure/%{destination_highest_registered_domain}"
                    }
                    sprintf => true
                    json => false
                    target => "destination_domain_frequency_score"
                } 
            }
        }
    }
    # Step 9 Asset Information
    if [step] {
        if [step] >= 9 {
            translate {
                field => "destination_ip"
                destination => "destination_asset"
                dictionary_path => "/home/jhenderson/assets.csv"
            }
            translate {
                field => "source_ip"
                destination => "source_asset"
                dictionary_path => "/home/jhenderson/assets.csv"
            }
            if [destination_asset]{
                kv {
                    source => "destination_asset"
                    target => "destination_asset"
                }
            }
            if [source_asset]{
                kv {
                    source => "source_asset"
                    target => "source_asset"
                }
            }
        }
    }
    # This will capture the finish time of the filter processing section and then use it with the
    # start time to calculate how long the log took to process.
    ruby {
        code => "event.set('task_end',Time.now.to_f)"
    }
    ruby {
        code => "event.set('logstash_time',(event.get('task_end') - event.get('task_start')).round(8))"
    }
    mutate {
        remove_field => [ 'task_start', 'task_end' ]
    }
}

output {
    stdout { codec => rubydebug }
#    file {
#        path => "/tmp/1_parsing.log"
#        codec => "json"
#    }
}

# Author: Justin Henderson
#         SANS Instructor and author of SANS SEC555: SIEM and Tactical Analytics
# Updated by: Doug Burks
# Last Update: 8/17/2017

input {
    stdin {}
}

filter {
    # This is the initial parsing of the log
    grok {
        match => ["message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}",
        "message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}", 
        "message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}", 
        "message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}"]
    }

    # If the alert is a Snort GPL alert break it apart for easier reading and categorization
    if [alert] =~ "GPL " {
        # This will parse out the category type from the alert
        grok {
            match => { "alert" => "GPL\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
            add_field => { "rule_type" => "Snort GPL" }
            lowercase => [ "category"]
        }
    }
    # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
    if [alert] =~ "ET " {
        # This will parse out the category type from the alert
        grok {
            match => { "alert" => "ET\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
            add_field => { "rule_type" => "Emerging Threats" }
            lowercase => [ "category"]
        }
    }
    # I recommend changing the field types below to integer so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
        convert => [ "source_port", "integer" ]
        convert => [ "destination_port", "integer" ]
        convert => [ "gid", "integer" ]
        convert => [ "sid", "integer" ]
    #  remove_field => [ "message"]
    }
    # This will translate the priority field into a severity field of either High, Medium, or Low
    if [priority] == 1 {
        mutate {
            add_field => { "severity" => "High" }
        }
    }
    if [priority] == 2 {
        mutate {
            add_field => { "severity" => "Medium" }
        }
    }
    if [priority] == 3 {
        mutate {
            add_field => { "severity" => "Low" }
        }
    }
    # This will perform a standard geoip lookup on the source and destination IP addresses
    geoip {
        source => "destination_ip"
        target => "destination_geo"
        tag_on_failure => []
    }
    geoip {
        source => "source_ip"
        target => "source_geo"
        tag_on_failure => []
    }
    # This will perform a geoip ASN lookup on the source and destination IP addresses
    geoip {
        source => "destination_ip"
        target => "destination_geo"
        default_database_type => "ASN"
        tag_on_failure => []
    }
    geoip {
        source => "source_ip"
        target => "source_geo"
        default_database_type => "ASN"
        tag_on_failure => []
    }
    # This will look into previous DNS logs to find if any DNS name query resolved to
    # the destination IP from the snort alert.
    elasticsearch {
        hosts => [ "localhost"]
        index => "logstash-*"
        query => "type:bro_dns AND answers:%{[destination_ip]}"
        fields => [["highest_registered_domain","destination_highest_registered_domain"],["query","destination_fqdn"]]
    }
    # This will look into previous DNS logs to find if any DNS name query resolved to
    # the source IP from the snort alert.
    elasticsearch {
        hosts => [ "localhost"]
        index => "logstash-*"
        query => "type:bro_dns AND answers:%{[source_ip]}"
        fields => [["highest_registered_domain","source_highest_registered_domain"],["query","source_fqdn"]]
    }
    # This will look into previous HTTP logs to find if any key file types have been downloaded
    if [source_port] == 80 or [destination_port] == 80 {
        elasticsearch {
            hosts => [ "localhost"]
            index => "logstash-*"
            query => "type:bro_http AND (destination_ip:%{[source_ip]} OR destination_ip:%{[destination_ip]}) AND (uri:*.exe OR uri:*.pdf OR uri:*.jar OR *.doc OR *.xls OR *.zip)"
            fields => [["resp_mime_types","resp_mime_types"],["useragent","useragent"],["uri","uri"]]
        }
    }
    # This will check to see if a DNS domain was pulled back and if so will check if it is in the
    # Alexa top-1m sites list
    if [source_highest_registered_domain] {
        rest {
            request => {
                url => "http://localhost:20001/alexa/%{source_highest_registered_domain}"
            }
            sprintf => true
            json => false
            target => "site"
        } 
    }
    if [destination_highest_registered_domain] {
        rest {
            request => {
                url => "http://localhost:20001/alexa/%{destination_highest_registered_domain}"
            }
            sprintf => true
            json => false
            target => "site"
        } 
    }
    if [site] != "0" and [site] {
        mutate {
            add_tag => [ "top-1m" ]
            remove_field => [ "site" ]
        }
    }
}

output {
    stdout { codec => rubydebug }
}
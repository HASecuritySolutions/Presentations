input {
    # google.com added to end of log for sake of testing domain_stats without needing to pull in DNS info
    generator {
        message => "[1:2000419:18] ET POLICY PE EXE or DLL Windows file download [Classification: Potential Corporate Privacy Violation] [Priority: 1]: <sodev-eth1-1> {TCP} 74.125.159.56:80 -> 192.168.2.39:49339 google.com"
        count => 5000000
    }
}

filter {
    # This is the initial parsing of the log
    grok {
        match => ["message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port:int}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port:int}\s%{GREEDYDATA:highest_registered_domain}$",
        "message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}$", 
        "message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port:int}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port:int}$", 
        "message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}$"]
    }
    if [highest_registered_domain] {
        rest {
            request => {
                url => "http://localhost:20001/alexa/%{highest_registered_domain}"
            }
            sprintf => true
            json => false
            target => "site"
        } 
    }
    if [site] != "0" and [site] {
        mutate {
            add_tag => [ "top-1m" ]
            remove_field => [ "site" ]
        }
    }
}

output {
    null {}
}
input {
    generator {
        message => "[1:2000419:18] ET POLICY PE EXE or DLL Windows file download [Classification: Potential Corporate Privacy Violation] [Priority: 1]: <sodev-eth1-1> {TCP} 74.125.159.56:80 -> 192.168.2.39:49339"
        count => 5000000
    }
}

filter {
    # This is the initial parsing of the log
    grok {
        match => ["message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port:int}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port:int}$",
        "message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}$", 
        "message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port:int}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port:int}$", 
        "message", "^\[%{INT:gid:int}:%{INT:sid:int}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}$"]
    }
    # Adds tag to identify if destination_ip is external or RFC1918 internal
    if [destination_ip] =~ "^10\." or [destination_ip] =~ "^192\.168\." or [destination_ip] =~ "^172\.(1[6-9]|2[0-9]|3[0-1])\." {
        mutate {
            add_tag => [ "internal_destination" ]
        }
    } else {
        mutate {
            add_tag => [ "external_destination" ]
        }
    }
    # Adds tag to identify if source_ip is external or RFC1918 internal
    if [source_ip] =~ "^10\." or [source_ip] =~ "^192\.168\." or [source_ip] =~ "^172\.(1[6-9]|2[0-9]|3[0-1])\." {
        mutate {
            add_tag => [ "internal_source" ]
        }
    } else {
        mutate {
            add_tag => [ "external_source" ]
        }
    }

    # This will look into previous DNS logs to find if any DNS name query resolved to
    # the destination IP from the snort alert.
    if "external_destination" in [tags] {
        memoize {
            key => "%{destination_ip}"
            fields => [ "highest_registered_domain", "query" ]
            filter_name => "elasticsearch"
            filter_options => {
                query => "type:bro_dns AND answers:%{destination_ip}"
                index => "logstash=*"
                fields => {
                    "highest_registered_domain" => "destination_highest_registered_domain"
                    "query" => "destination_fqdn"
                }
            }
        }
    }
    # This will look into previous DNS logs to find if any DNS name query resolved to
    # the source IP from the snort alert.
    if "external_source" in [tags] {
        memoize {
            key => "%{source_ip}"
            fields => [ "highest_registered_domain", "query" ]
            filter_name => "elasticsearch"
            filter_options => {
                query => "type:bro_dns AND answers:%{source_ip}"
                index => "logstash=*"
                fields => {
                    "highest_registered_domain" => "source_highest_registered_domain"
                    "query" => "source_fqdn"
                }
            }
        }
    }
}

output {
    null {}
}
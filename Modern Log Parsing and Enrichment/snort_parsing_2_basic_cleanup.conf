# Author: Justin Henderson
#         SANS Instructor and author of SANS SEC555: SIEM and Tactical Analytics
# Updated by: Doug Burks
# Last Update: 8/17/2017

input {
    stdin {}
}

filter {
    # This is used to capture the current time before filter section processing takes place
    ruby {
        code => "event.set('task_start',Time.now.to_f)"
    }
    # This is the initial parsing of the log
    grok {
        match => ["message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}",
        "message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+<%{DATA:interface}>\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}", 
        "message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s+%{IPV4:source_ip}:%{INT:source_port}\s+->\s+%{IPV4:destination_ip}:%{INT:destination_port}", 
        "message", "\[%{INT:gid}:%{INT:sid}:%{INT:rev}\]\s%{DATA:alert}\[Classification:\s+%{DATA:classification}\]\s+\[Priority:\s+%{INT:priority}\]:\s+{%{DATA:protocol}}\s%{IPV4:source_ip}\s+->\s+%{IPV4:destination_ip}"]
    }

    # If the alert is a Snort GPL alert break it apart for easier reading and categorization
    if [alert] =~ "GPL " {
        # This will parse out the category type from the alert
        grok {
            match => { "alert" => "GPL\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
            add_field => { "rule_type" => "Snort GPL" }
            lowercase => [ "category"]
        }
    }
    # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
    if [alert] =~ "ET " {
        # This will parse out the category type from the alert
        grok {
            match => { "alert" => "ET\s+%{DATA:category}\s" }
        }
        # This will store the category
        mutate {
            add_field => { "rule_type" => "Emerging Threats" }
            lowercase => [ "category"]
        }
    }
    # I recommend changing the field types below to integer so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
        convert => [ "source_port", "integer" ]
        convert => [ "destination_port", "integer" ]
        convert => [ "gid", "integer" ]
        convert => [ "sid", "integer" ]
    #  remove_field => [ "message"]
    }
    # This will translate the priority field into a severity field of either High, Medium, or Low
    if [priority] == 1 {
        mutate {
            add_field => { "severity" => "High" }
        }
    }
    if [priority] == 2 {
        mutate {
            add_field => { "severity" => "Medium" }
        }
    }
    if [priority] == 3 {
        mutate {
            add_field => { "severity" => "Low" }
        }
    }
    # This will capture the finish time of the filter processing section and then use it with the
    # start time to calculate how long the log took to process.
    ruby {
        code => "event.set('task_end',Time.now.to_f)"
    }
    ruby {
        code => "event.set('logstash_time',(event.get('task_end') - event.get('task_start')).round(8))"
    }
    mutate {
        remove_field => [ 'task_start', 'task_end' ]
    }
}

output {
    stdout { codec => rubydebug }
    file {
        path => "/tmp/snort_parsing_2_basic_cleanup.log"
        codec => "json"
    }
}